// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PAT.AccessModel.Models;

#nullable disable

namespace PAT.MVC.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240331180356_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AboutUs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AboutUs");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AcademyGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("GoalDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AcademyGoals");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AcademyMagazine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoverImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MagazineNumber")
                        .HasColumnType("int");

                    b.Property<string>("PdfFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademyMagazines");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AcademyNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBY");

                    b.ToTable("AcademyNews");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AcademyRoles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("AcademyRoles");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AccreditationProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccreditationProcedureCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationProcedureCategoryId");

                    b.ToTable("AccreditationProcedures");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AccreditationProcedureCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("AccreditationProcedureCategories");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AccreditedCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("AccreditedCenters");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Branch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("branchAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchFax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchManagerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("statistics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Carousal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CarousalText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buttonLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buttonText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carousals");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.CarousalImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarousalId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarousalId");

                    b.ToTable("CarousalImages");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Certificate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<int?>("PATManagerId")
                        .HasColumnType("int");

                    b.Property<string>("certificateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("institutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.HasIndex("PATManagerId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.CertificateProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CertificateProcedureCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateProcedureCategoryId");

                    b.ToTable("CertificateProcedures");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.CertificateProcedureCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("CertificateProcedureCategories");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.certificatesInq.CertificatesInquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CertificatesInquiries");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactUsTopicId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsTopicId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.ContactUSTopics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ContactUSTopics");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.DeciesionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeciesionCategories");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.EducitionalAdministration", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.HasIndex("GovernmentId");

                    b.ToTable("EducitionalAdministrations");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Experience", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PATManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.HasIndex("PATManagerId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FAQCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("FAQCategories");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FAQModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedBY");

                    b.ToTable("FAQModels");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FaQQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FAQModelId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FAQModelId");

                    b.ToTable("FaQQuestionAnswer");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FooterModels.Footer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Footers");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FooterModels.FooterLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("sectionId");

                    b.ToTable("FooterLinks");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FooterModels.FooterSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FooterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FooterId");

                    b.ToTable("FooterSections");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Government", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("Governments");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.DrobdownLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DropdownId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DropdownId");

                    b.ToTable("DrobdownLinks");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.Dropdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DropdownName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MenuBarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuBarId");

                    b.ToTable("Dropdowns");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.MenuBar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LogoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuBars");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.MenuLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MenuBarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuBarId");

                    b.ToTable("MenuLinks");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reviewer")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("Type");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MinisterialEmploymentDescisions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<int>("DeciesionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PdfFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.HasIndex("DeciesionCategoryId");

                    b.ToTable("MinisterialEmploymentDescisions");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MinisterialPromotionDescisions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("MinisterialPromotionDescisions");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Monthes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Monthes");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.NewsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("NewsCategories");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PATManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.Property<int>("birthPlace")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("imagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.HasIndex("birthPlace");

                    b.ToTable("PATManagers");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Position", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("postCategoryId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.HasIndex("postCategoryId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PostCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PromotionExam", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("PromotionExams");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PromotionExamType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prerequisite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("PromotionExamTypes");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Service", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TopHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopHeaderId");

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TeacherGetway", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("TeacherGetways");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TeamMembers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreatedBY")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreatedBY");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TempModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Describtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TempPageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TempPageId");

                    b.ToTable("tempModels");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TempPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TempPage");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ListedItems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TopHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ComplainsPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TopHeaders");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserCertificateRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("certificateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("userCertificateRequests");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserCertificates", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("certificateExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("certificateImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("certificateIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("certificateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certificateRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("certificateStatus")
                        .HasColumnType("int");

                    b.Property<string>("certificateTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certificateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certificateUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("educitionalAdministrationId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.HasIndex("educitionalAdministrationId");

                    b.ToTable("userCertificates");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("educitionalAdministrationId")
                        .HasColumnType("int");

                    b.Property<string>("familyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("governmentId")
                        .HasColumnType("int");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("positionId")
                        .HasColumnType("int");

                    b.Property<string>("teacherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.HasIndex("educitionalAdministrationId");

                    b.HasIndex("governmentId");

                    b.HasIndex("positionId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserExamRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExamRequests");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.StatisticsModels.StatItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("statItems");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AboutUs", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Users")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AcademyGoals", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("AcademyGoals")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AcademyNews", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.NewsCategory", "NewsCategory")
                        .WithMany("News")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("AcademyNews")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AcademyRoles", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("AcademyRoles")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AccreditationProcedure", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.AccreditationProcedureCategory", "AccreditationProcedureCategory")
                        .WithMany("AccreditationProcedure")
                        .HasForeignKey("AccreditationProcedureCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccreditationProcedureCategory");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AccreditationProcedureCategory", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AccreditedCenter", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("AccreditedCenters")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Branch", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Branches")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.CarousalImages", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.Carousal", "Carousal")
                        .WithMany("Images")
                        .HasForeignKey("CarousalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carousal");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Certificate", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.PATManager", null)
                        .WithMany("certificates")
                        .HasForeignKey("PATManagerId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.CertificateProcedure", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.CertificateProcedureCategory", "CertificateProcedureCategory")
                        .WithMany("CertificateProcedure")
                        .HasForeignKey("CertificateProcedureCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateProcedureCategory");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.CertificateProcedureCategory", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.ContactUs", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.ContactUSTopics", "ContactUSTopics")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactUsTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("ContactUss")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContactUSTopics");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.ContactUSTopics", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("ContactUSTopicss")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.EducitionalAdministration", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("EducitionalAdministration")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.Government", "government")
                        .WithMany()
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("government");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Experience", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.PATManager", null)
                        .WithMany("experiences")
                        .HasForeignKey("PATManagerId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FAQCategory", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FAQModel", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.FAQCategory", "FAQCategory")
                        .WithMany("FAQModel")
                        .HasForeignKey("Category")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("FAQModels")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FAQCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FaQQuestionAnswer", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.FAQModel", "FAQModel")
                        .WithMany("FaQQuestionAnswer")
                        .HasForeignKey("FAQModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FAQModel");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FooterModels.FooterLink", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.FooterModels.FooterSection", "Section")
                        .WithMany("Links")
                        .HasForeignKey("sectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FooterModels.FooterSection", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.FooterModels.Footer", "Footer")
                        .WithMany("Sections")
                        .HasForeignKey("FooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footer");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Government", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Government")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.DrobdownLink", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.MenuBarModels.Dropdown", null)
                        .WithMany("DrobdownLinks")
                        .HasForeignKey("DropdownId");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.Dropdown", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.MenuBarModels.MenuBar", "MenuBar")
                        .WithMany("Dropdowns")
                        .HasForeignKey("MenuBarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuBar");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.MenuLink", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.MenuBarModels.MenuBar", null)
                        .WithMany("MenuLinks")
                        .HasForeignKey("MenuBarId");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Message", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.Branch", "Branch")
                        .WithMany("Messages")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.MessageType", "MessageType")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MinisterialEmploymentDescisions", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("MinisterialEmploymentDescisions")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.DeciesionCategory", "DeciesionCategory")
                        .WithMany("Decisions")
                        .HasForeignKey("DeciesionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeciesionCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MinisterialPromotionDescisions", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("MinisterialPromotionDescisionss")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.NewsCategory", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Partner", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Partners")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PATManager", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", null)
                        .WithMany("PATManagers")
                        .HasForeignKey("Userid");

                    b.HasOne("PAT.AccessModel.Models.Info.Government", "Government")
                        .WithMany()
                        .HasForeignKey("birthPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Government");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Position", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Positions")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Post", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.PostCategory", "PostCategory")
                        .WithMany()
                        .HasForeignKey("postCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PostCategory", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("PostCategories")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PromotionExam", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("PromotionExams")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.PromotionExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PromotionExamType", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("PromotionExamTypes")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Service", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.SocialMedia", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.TopHeader", "Header")
                        .WithMany("ICons")
                        .HasForeignKey("TopHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Header");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TeacherGetway", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("TeacherGetway")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TeamMembers", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("CreatedBY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TempModel", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.TempPage", "TempPage")
                        .WithMany("Content")
                        .HasForeignKey("TempPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TempPage");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.User", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.UserType", "userType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userType");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserCertificateRequest", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("UserCertificateRequests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserCertificates", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany("UserCertificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.EducitionalAdministration", "EducitionalAdministration")
                        .WithMany()
                        .HasForeignKey("educitionalAdministrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("EducitionalAdministration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserDetails", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("PAT.AccessModel.Models.Info.EducitionalAdministration", "educitionalAdministration")
                        .WithMany()
                        .HasForeignKey("educitionalAdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.Government", "government")
                        .WithMany()
                        .HasForeignKey("governmentId");

                    b.HasOne("PAT.AccessModel.Models.Info.Position", "position")
                        .WithMany()
                        .HasForeignKey("positionId");

                    b.Navigation("User");

                    b.Navigation("educitionalAdministration");

                    b.Navigation("government");

                    b.Navigation("position");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.UserExamRequest", b =>
                {
                    b.HasOne("PAT.AccessModel.Models.Info.PromotionExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PAT.AccessModel.Models.Info.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.AccreditationProcedureCategory", b =>
                {
                    b.Navigation("AccreditationProcedure");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Branch", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.Carousal", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.CertificateProcedureCategory", b =>
                {
                    b.Navigation("CertificateProcedure");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.ContactUSTopics", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.DeciesionCategory", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FAQCategory", b =>
                {
                    b.Navigation("FAQModel");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FAQModel", b =>
                {
                    b.Navigation("FaQQuestionAnswer");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FooterModels.Footer", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.FooterModels.FooterSection", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.Dropdown", b =>
                {
                    b.Navigation("DrobdownLinks");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.MenuBarModels.MenuBar", b =>
                {
                    b.Navigation("Dropdowns");

                    b.Navigation("MenuLinks");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.NewsCategory", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.PATManager", b =>
                {
                    b.Navigation("certificates");

                    b.Navigation("experiences");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TempPage", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.TopHeader", b =>
                {
                    b.Navigation("ICons");
                });

            modelBuilder.Entity("PAT.AccessModel.Models.Info.User", b =>
                {
                    b.Navigation("AcademyGoals");

                    b.Navigation("AcademyNews");

                    b.Navigation("AcademyRoles");

                    b.Navigation("AccreditedCenters");

                    b.Navigation("Branches");

                    b.Navigation("Certificates");

                    b.Navigation("ContactUSTopicss");

                    b.Navigation("ContactUss");

                    b.Navigation("EducitionalAdministration");

                    b.Navigation("Experiences");

                    b.Navigation("FAQModels");

                    b.Navigation("Government");

                    b.Navigation("MinisterialEmploymentDescisions");

                    b.Navigation("MinisterialPromotionDescisionss");

                    b.Navigation("PATManagers");

                    b.Navigation("Partners");

                    b.Navigation("Positions");

                    b.Navigation("PostCategories");

                    b.Navigation("Posts");

                    b.Navigation("PromotionExamTypes");

                    b.Navigation("PromotionExams");

                    b.Navigation("Services");

                    b.Navigation("TeacherGetway");

                    b.Navigation("TeamMembers");

                    b.Navigation("UserCertificateRequests");

                    b.Navigation("UserCertificates");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
